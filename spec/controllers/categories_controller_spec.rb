require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe CategoriesController do
  def category(stubs={})
    @category ||= Factory.build(:category).tap { |cat| flexmock(cat, stubs) }
  end

  def category_at(id, stubs={})
    category.tap { |c| c.should_receive(:id => id, :new_record? => false) }
  end

  describe "GET index" do
    it "assigns all categories as @categories" do
      flexmock(Category, :sorted => [category])
      get :index
      assigns(:categories).should eq([category])
    end
  end

  describe "GET show" do
    it "assigns the requested category as @category" do
      flexmock(Category).should_receive(:find).with("37").and_return(category)
      get :show, :id => "37"
      assigns(:category).should be(category)
    end
  end

  describe "GET new" do
    it "assigns a new category as @category" do
      flexmock(Category, :new => category)
      get :new
      assigns(:category).should be(category)
    end
  end

  describe "GET edit" do
    it "assigns the requested category as @category" do
      flexmock(Category).should_receive(:find).with("37").and_return(category)
      get :edit, :id => "37"
      assigns(:category).should be(category)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created category as @category" do
        cat = category(:save => true)
        flexmock(Category).should_receive(:new).with({'these' => 'params'}).
          and_return(cat)
        post :create, :category => {'these' => 'params'}
        assigns(:category).should be(category)
      end

      it "redirects to the categories index" do
        flexmock(Category, :new => category(:save => true))
        post :create, :category => {}
        response.should redirect_to(categories_path)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved category as @category" do
        cat = category(:save => false)
        flexmock(Category).should_receive(:new).with({'these' => 'params'}).
          and_return(cat)
        post :create, :category => {'these' => 'params'}
        assigns(:category).should be(category)
      end

      it "re-renders the 'new' template" do
        flexmock(Category, :new => category(:save => false))
        post :create, :category => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested category" do
        flexmock(Category).should_receive(:find).with("37").and_return(category)
        category.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :category => {'these' => 'params'}
      end

      it "assigns the requested category as @category" do
        flexmock(Category, :find => category(:update_attributes => true))
        put :update, :id => "1"
        assigns(:category).should be(category)
      end

      it "redirects to the category" do
        cat = category_at(1, :update_attributes => true)
        flexmock(Category, :find => cat)
        put :update, :id => "1"
        response.should redirect_to(categories_path)
      end
    end

    describe "with invalid params" do
      it "assigns the category as @category" do
        flexmock(Category, :find => category(:update_attributes => false))
        put :update, :id => "1"
        assigns(:category).should be(category)
      end

      it "re-renders the 'edit' template" do
        flexmock(Category, :find => category(:update_attributes => false))
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested category" do
      flexmock(Category).should_receive(:find).with("37").
        and_return(category)
      category.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the categories list" do
      flexmock(Category, :find => category)
      delete :destroy, :id => "1"
      response.should redirect_to(categories_url)
    end
  end

end
